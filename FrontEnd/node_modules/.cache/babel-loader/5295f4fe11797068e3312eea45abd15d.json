{"ast":null,"code":"let getLocationPromise = () => {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(position => resolve(position), error => reject(error));\n  });\n};\n\nconst getLocation = stateVariable => {\n  getLocationPromise().then(res => {\n    const {\n      coords\n    } = res;\n    console.log(coords);\n    return coords;\n  }).then(async coords => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        lat: coords.latitude,\n        lng: coords.longitude\n      })\n    };\n    const response = await fetch('/api/location', requestOptions);\n    stateVariable = await response.json();\n    console.log(` The state variable is returning this ${stateVariable}`);\n  }).catch(error => {\n    console.log({\n      error: error.code,\n      message: error.message\n    });\n  });\n};\n\nexport { getLocationPromise, getLocation };","map":{"version":3,"names":["getLocationPromise","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","error","getLocation","stateVariable","then","res","coords","console","log","requestOptions","method","headers","body","JSON","stringify","lat","latitude","lng","longitude","response","fetch","json","catch","code","message"],"sources":["/Users/Zach/Desktop/WeatherD_v2/weatherdb/src/components/locationScripts.js"],"sourcesContent":["let getLocationPromise = ()=>{\n    return new Promise(function(resolve,reject){\n      navigator.geolocation.getCurrentPosition(\n        position=>resolve(position),\n        error=>reject(error)\n      )\n    })\n    }\n\n    const getLocation =(stateVariable)=>{\n        getLocationPromise()\n      .then((res)=>{\n        const {coords} =res\n        console.log(coords);\n        return coords\n      })\n      .then( async coords=>{\n    \n        const requestOptions = {\n          method:'POST',\n          headers:{\"Content-Type\": \"application/json\"},\n          body: JSON.stringify({lat:coords.latitude, lng:coords.longitude})\n         }\n         const response = await fetch('/api/location',requestOptions);\n          stateVariable =await response.json();\n         console.log(` The state variable is returning this ${stateVariable}`);\n        }\n      )\n      .catch((error)=>{\n        console.log({error:error.code, message:error.message});\n      })\n    }\n\n    export {getLocationPromise, getLocation};"],"mappings":"AAAA,IAAIA,kBAAkB,GAAG,MAAI;EACzB,OAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAiBC,MAAjB,EAAwB;IACzCC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACEC,QAAQ,IAAEL,OAAO,CAACK,QAAD,CADnB,EAEEC,KAAK,IAAEL,MAAM,CAACK,KAAD,CAFf;EAID,CALM,CAAP;AAMC,CAPL;;AASI,MAAMC,WAAW,GAAGC,aAAD,IAAiB;EAChCV,kBAAkB,GACnBW,IADC,CACKC,GAAD,IAAO;IACX,MAAM;MAACC;IAAD,IAAUD,GAAhB;IACAE,OAAO,CAACC,GAAR,CAAYF,MAAZ;IACA,OAAOA,MAAP;EACD,CALC,EAMDF,IANC,CAMK,MAAME,MAAN,IAAc;IAEnB,MAAMG,cAAc,GAAG;MACrBC,MAAM,EAAC,MADc;MAErBC,OAAO,EAAC;QAAC,gBAAgB;MAAjB,CAFa;MAGrBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAACC,GAAG,EAACT,MAAM,CAACU,QAAZ;QAAsBC,GAAG,EAACX,MAAM,CAACY;MAAjC,CAAf;IAHe,CAAvB;IAKC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,EAAiBX,cAAjB,CAA5B;IACCN,aAAa,GAAE,MAAMgB,QAAQ,CAACE,IAAT,EAArB;IACDd,OAAO,CAACC,GAAR,CAAa,yCAAwCL,aAAc,EAAnE;EACA,CAhBD,EAkBDmB,KAlBC,CAkBMrB,KAAD,IAAS;IACdM,OAAO,CAACC,GAAR,CAAY;MAACP,KAAK,EAACA,KAAK,CAACsB,IAAb;MAAmBC,OAAO,EAACvB,KAAK,CAACuB;IAAjC,CAAZ;EACD,CApBC;AAqBH,CAtBD;;AAwBA,SAAQ/B,kBAAR,EAA4BS,WAA5B"},"metadata":{},"sourceType":"module"}