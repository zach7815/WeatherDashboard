{"ast":null,"code":"var _jsxFileName = \"/Users/Zach/Desktop/WeatherDashboard-Frontend/WeatherDashboard-Frontend/FrontEnd/src/components/LocalTime.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport doDate from \"../LocalTime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet date = doDate();\n\nconst LocalDateAndTime = () => {\n  _s();\n\n  const timeRef = useRef(null);\n  useEffect(() => {\n    const setTime = setInterval(() => {\n      if (timeRef) {\n        timeRef.current.innerText = new Date().toLocaleTimeString();\n      }\n    }, 1000);\n    return () => clearInterval(setTime);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weatherContainer currentTime\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Your Local Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      ref: timeRef,\n      children: \"time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LocalDateAndTime, \"KvYXkU3mBl6HP0qlYnsxP+0abdQ=\");\n\n_c = LocalDateAndTime;\nexport default LocalDateAndTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalDateAndTime\");","map":{"version":3,"names":["React","useEffect","useRef","doDate","date","LocalDateAndTime","timeRef","setTime","setInterval","current","innerText","Date","toLocaleTimeString","clearInterval"],"sources":["/Users/Zach/Desktop/WeatherDashboard-Frontend/WeatherDashboard-Frontend/FrontEnd/src/components/LocalTime.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport doDate from \"../LocalTime\";\nlet date = doDate();\n\n\n\nconst LocalDateAndTime = ()=>{\nconst timeRef= useRef(null);\n\nuseEffect(()=>{\n    const setTime= setInterval(()=>{ \n        if(timeRef){\n            timeRef.current.innerText=new Date().toLocaleTimeString();\n        }\n    },1000)\n    return ()=>clearInterval(setTime);\n},[])\n\n\n    return(\n        <div className=\"weatherContainer currentTime\">\n        <h2> Your Local Time</h2>\n        <h2 ref={timeRef}>time</h2>\n        <h3>{date}</h3>\n        </div>\n    )\n};\n\nexport default LocalDateAndTime;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AACA,IAAIC,IAAI,GAAGD,MAAM,EAAjB;;AAIA,MAAME,gBAAgB,GAAG,MAAI;EAAA;;EAC7B,MAAMC,OAAO,GAAEJ,MAAM,CAAC,IAAD,CAArB;EAEAD,SAAS,CAAC,MAAI;IACV,MAAMM,OAAO,GAAEC,WAAW,CAAC,MAAI;MAC3B,IAAGF,OAAH,EAAW;QACPA,OAAO,CAACG,OAAR,CAAgBC,SAAhB,GAA0B,IAAIC,IAAJ,GAAWC,kBAAX,EAA1B;MACH;IACJ,CAJyB,EAIxB,IAJwB,CAA1B;IAKA,OAAO,MAAIC,aAAa,CAACN,OAAD,CAAxB;EACH,CAPQ,EAOP,EAPO,CAAT;EAUI,oBACI;IAAK,SAAS,EAAC,8BAAf;IAAA,wBACA;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADA,eAEA;MAAI,GAAG,EAAED,OAAT;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFA,eAGA;MAAA,UAAKF;IAAL;MAAA;MAAA;MAAA;IAAA,QAHA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CApBD;;GAAMC,gB;;KAAAA,gB;AAsBN,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}